{"version":3,"sources":["loader.js","container/mainScreen.tsx","utils.ts","exampleComponent/simpleDyteClient.tsx","exampleComponent/customLayoutButton.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LoaderIcon","props","xmlns","style","margin","width","height","viewBox","preserveAspectRatio","display","cx","cy","fill","stroke","strokeWidth","r","strokeDasharray","attributeName","type","repeatCount","dur","values","keyTimes","folderNameMap","MainScreenComponent","useState","loading","setLoading","allMeeetings","setAllMeeting","newMeetingTitle","setNewMeetingTitle","selectedExample","setSelectedExample","history","useHistory","handleCreateRoomClick","useCallback","title","axios","url","method","headers","Accept","data","then","res","rooms","push","meeting","catch","err","console","error","joinRoom","meetingId","roomName","a","isHost","resp","authResponse","authToken","sessionStorage","setItem","useEffect","response","meetings","finally","className","src","alt","value","placeholder","onChange","e","target","onClick","map","el","k","id","length","joinExistingRoom","window","location","reload","MeetingComponent","params","useParams","auth","getItem","room","Fragment","process","REACT_APP_DYTE_ORG_ID","onInit","on","Events","meetingEnded","clear","clientId","meetingConfig","apiBase","REACT_APP_DYTE_BASE_URL","CustomLayoutButton","meetingJoined","controlBar","addButton","icon","label","position","alert","showSetupScreen","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e4debfe.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nfunction LoaderIcon(props) {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      style={{\r\n        margin: \"auto\",\r\n      }}\r\n      width={38}\r\n      height={38}\r\n      viewBox=\"0 0 100 100\"\r\n      preserveAspectRatio=\"xMidYMid\"\r\n      display=\"block\"\r\n      {...props}\r\n    >\r\n      <circle\r\n        cx={50}\r\n        cy={50}\r\n        fill=\"none\"\r\n        stroke=\"#fff\"\r\n        strokeWidth={7}\r\n        r={26}\r\n        strokeDasharray=\"122.52211349000194 42.840704496667314\"\r\n      >\r\n        <animateTransform\r\n          attributeName=\"transform\"\r\n          type=\"rotate\"\r\n          repeatCount=\"indefinite\"\r\n          dur=\"0.3759398496240602s\"\r\n          values=\"0 50 50;360 50 50\"\r\n          keyTimes=\"0;1\"\r\n        />\r\n      </circle>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default LoaderIcon;\r\n","import axios from \"axios\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport LoaderIcon from \"../loader\";\r\n\r\nconst folderNameMap: any = {\r\n  \"simple-dyte-client\": \"simpleDyteMeeting\",\r\n  \"custom-layout-button\": \"customLayoutButton\",\r\n};\r\n\r\nexport const MainScreenComponent: React.FC<{}> = () => {\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [allMeeetings, setAllMeeting] = useState<any[]>([]);\r\n  const [newMeetingTitle, setNewMeetingTitle] = useState<string>(\"\");\r\n  const [selectedExample, setSelectedExample] =\r\n    useState<string>(\"simple-dyte-client\");\r\n\r\n  let history = useHistory();\r\n\r\n  const handleCreateRoomClick = useCallback(\r\n    (title) => {\r\n      axios({\r\n        url: `/meeting`,\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n        data: {\r\n          title: title,\r\n        },\r\n      })\r\n        .then((res) => {\r\n          let rooms = [...allMeeetings];\r\n          rooms.push(res.data.data.meeting);\r\n          setAllMeeting([...rooms]);\r\n          setNewMeetingTitle(\"\");\r\n        })\r\n        .catch((err) => console.error(err));\r\n    },\r\n    [allMeeetings]\r\n  );\r\n\r\n  const joinRoom = async (\r\n    meetingId: string,\r\n    roomName: string,\r\n    isHost: boolean = false\r\n  ) => {\r\n    const resp = await axios({\r\n      url: `/participant`,\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n      },\r\n      data: {\r\n        isHost: isHost,\r\n        meetingId: meetingId,\r\n      },\r\n    });\r\n\r\n    const authResponse = resp.data.data.authResponse;\r\n    const authToken = authResponse.authToken;\r\n\r\n    //saving meeting details in session storage\r\n    sessionStorage.setItem(\"auth\", authToken);\r\n    sessionStorage.setItem(\"meetingID\", meetingId);\r\n    sessionStorage.setItem(\"roomName\", roomName);\r\n\r\n    //redirecting to the example meeting page\r\n    history.push(`/${selectedExample}/meeting/${roomName}/${meetingId}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // api call to get list of available/existing meeting rooms\r\n    axios({\r\n      url: `/meeting`,\r\n      method: \"GET\",\r\n    })\r\n      .then((response) => {\r\n        setAllMeeting(response.data.data.meetings);\r\n      })\r\n      .catch((err) => console.error(err))\r\n      .finally(() => setLoading(false));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"main-screen-wrapper\">\r\n      <img src=\"/logo/dyte_logo_white.svg\" alt=\"dyte-logo\" />\r\n      <h1>Welcome to the example app.</h1>\r\n      <div className=\"flex row\">\r\n        <input\r\n          type=\"text\"\r\n          value={newMeetingTitle}\r\n          placeholder=\"New meeting title\"\r\n          onChange={(e) => setNewMeetingTitle(e.target.value)}\r\n        />\r\n        <button\r\n          className=\"margin-left\"\r\n          onClick={() => handleCreateRoomClick(newMeetingTitle)}\r\n        >\r\n          Create Room\r\n        </button>\r\n      </div>\r\n      <div className=\"divider\" />\r\n      <h3>Choose Example </h3>\r\n      <select onChange={(e) => setSelectedExample(e.target.value)}>\r\n        <option value=\"simple-dyte-client\">simple-dyte-client</option>\r\n        <option value=\"custom-layout-button\">custom-layout-button</option>\r\n      </select>\r\n      <div className=\"ex-det\">\r\n        <div>Check the example component here</div>\r\n        <br />\r\n        <code>/src/exampleComponent/{folderNameMap[selectedExample]}</code>\r\n      </div>\r\n      <div className=\"divider\" />\r\n      <div className=\"existing-meeting-wrapper flex column \">\r\n        <h3>List of created rooms.</h3>\r\n        <h5>Click to join as new participant or as a host.</h5>\r\n        <div className=\"existing-meeting-list flex row \">\r\n          {!loading &&\r\n            allMeeetings.map((el, k) => {\r\n              return (\r\n                <div key={el.id} className=\"flex column meeting-list-wrapper\">\r\n                  <li key={k}>{el.title}</li>\r\n                  <div className=\"flex row\">\r\n                    <button\r\n                      onClick={() => joinRoom(el.id, el.roomName, true)}\r\n                    >\r\n                      Join as Host{\" \"}\r\n                    </button>\r\n                    <button\r\n                      className=\"margin-left\"\r\n                      onClick={() => joinRoom(el.id, el.roomName)}\r\n                    >\r\n                      Join as Participant{\" \"}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n        {!loading && !allMeeetings.length && (\r\n          <div className=\"flex no-rooms column\">\r\n            <div>No existing rooms 🙁 !</div>\r\n            <div>Create a new room above</div>\r\n          </div>\r\n        )}\r\n        {loading && <LoaderIcon />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport const joinExistingRoom = async (\r\n    meetingId: string,\r\n    roomName: string,\r\n  ) => {\r\n    const resp = await axios({\r\n      url: `/participant`,\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n      },\r\n      data: {\r\n        meetingId: meetingId,\r\n      },\r\n    });\r\n\r\n    const authResponse = resp.data.data.authResponse;\r\n    const authToken = authResponse.authToken;\r\n\r\n    //saving meeting details in session storage\r\n    sessionStorage.setItem(\"auth\", authToken);\r\n    sessionStorage.setItem(\"meetingID\", meetingId);\r\n    sessionStorage.setItem(\"roomName\", roomName);\r\n\r\n    //reloading the page\r\n    window.location.reload()\r\n  };","import React, { useEffect } from \"react\";\r\nimport { DyteMeeting, Meeting } from \"dyte-client\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { joinExistingRoom } from \"../utils\";\r\n\r\nexport const MeetingComponent: React.FC<{}> = () => {\r\n  let history = useHistory();\r\n  let params : {\r\n    id :  string;\r\n    room : string\r\n  } = useParams()\r\n  let auth = sessionStorage.getItem(\"auth\");\r\n  let roomName = sessionStorage.getItem(\"roomName\");\r\n\r\n  const onDyteInit = (meeting: Meeting) => {\r\n    //meeting ended event\r\n    meeting.on(meeting.Events.meetingEnded, () => {\r\n      sessionStorage.clear();\r\n      history.push(\"/\");\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(!auth && !roomName){\r\n      //creating a new participant\r\n      joinExistingRoom(params.id, params.room)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {auth && roomName && process.env.REACT_APP_DYTE_ORG_ID && (\r\n        <DyteMeeting\r\n          onInit={onDyteInit}\r\n          clientId={process.env.REACT_APP_DYTE_ORG_ID}\r\n          meetingConfig={{\r\n            roomName: roomName,\r\n            authToken: auth,\r\n            apiBase: process.env.REACT_APP_DYTE_BASE_URL,\r\n          }}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { DyteMeeting, Meeting } from \"dyte-client\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { joinExistingRoom } from \"../utils\";\r\n\r\nexport const CustomLayoutButton: React.FC<{}> = () => {\r\n  let history = useHistory();\r\n  let params : {\r\n    id :  string;\r\n    room : string\r\n  } = useParams()\r\n  let auth = sessionStorage.getItem(\"auth\");\r\n  let roomName = sessionStorage.getItem(\"roomName\");\r\n\r\n  const onDyteInit = (meeting: Meeting): void => {\r\n    //meeting joined event\r\n    meeting.on(meeting.Events.meetingJoined, () => {\r\n      meeting.controlBar.addButton({\r\n        icon: <div>😀</div>,\r\n        label: \"React 😀\",\r\n        position: \"center\",\r\n        onClick: () => {\r\n          alert(\"Reaction Click\");\r\n        },\r\n      });\r\n    });\r\n\r\n    //meeting ended event\r\n    meeting.on(meeting.Events.meetingEnded, () => {\r\n      sessionStorage.clear();\r\n      history.push(\"/\");\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(!auth && !roomName){\r\n      //creating a new participant\r\n      joinExistingRoom(params.id, params.room)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {auth && roomName && process.env.REACT_APP_DYTE_ORG_ID && (\r\n        <DyteMeeting\r\n          onInit={onDyteInit}\r\n          clientId={process.env.REACT_APP_DYTE_ORG_ID}\r\n          meetingConfig={{\r\n            roomName: roomName,\r\n            authToken: auth,\r\n            apiBase: process.env.REACT_APP_DYTE_BASE_URL,\r\n            showSetupScreen: true,\r\n          }}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { MainScreenComponent } from \"./container/mainScreen\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { MeetingComponent } from \"./exampleComponent/simpleDyteClient\";\r\nimport { CustomLayoutButton } from \"./exampleComponent/customLayoutButton\";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={MainScreenComponent} />\r\n          <Route\r\n            path=\"/simple-dyte-client/meeting/:room/:id\"\r\n            component={MeetingComponent}\r\n          />\r\n          <Route\r\n            path=\"/custom-layout-button/meeting/:room/:id\"\r\n            component={CustomLayoutButton}\r\n          />\r\n        </Switch>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}